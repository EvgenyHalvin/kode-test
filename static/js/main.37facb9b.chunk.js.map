{"version":3,"sources":["components/Header.js","components/Login.js","components/ProtectedRoute.js","components/Card.js","components/Cards.js","components/ListItem.js","components/Selector.js","components/Sidebar.js","components/Pagination.js","components/Main.js","components/ErrorPopup.js","components/FullImagePopup.js","components/ConfirmationContent.js","components/Confirmation.js","contexts/pocemonFullInfoContext.js","components/FullInfoCard.js","utils/api.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","loggedIn","isConfirmed","signOut","className","to","onClick","Login","checkMatch","initialValues","email","password","validationSchema","Yup","shape","required","onSubmit","values","actions","setSubmitting","setTimeout","isSubmitting","type","name","placeholder","render","msg","disabled","ProtectedRoute","Component","component","props","Card","card","getPokemonInfo","setCardInfo","openFullImage","style","backgroundImage","images","small","artist","Cards","cards","isGotItems","map","item","id","ListItem","selectItem","Selector","selesctItem","listItems","typeSelector","menuId","menuList","toggleMenu","useState","setIsMenuOpen","selectValue","setSelectValue","listValueItems","setListValueItems","titleSelect","setTitleSelect","handleMenu","choiceTypeAndSelect","useEffect","filter","toLowerCase","includes","value","onChange","e","target","autoComplete","i","Sidebar","types","subtypes","getSelectedOptions","selectedItems","setSelectedItems","one","two","setMenuList","getSelectedItems","subtype","Object","assign","Pagination","currentPage","routePage","pagesAmount","nextPage","prevPage","firstPage","lastPage","Main","onClose","getCards","getTypes","getSubtypes","setCurrentPage","cardsPerPage","setPagesAmount","defaultCards","setDefaultCards","changePage","numberPage","slice","Math","ceil","length","prev","ErrorPopup","isOpen","FullImagePopup","alt","src","large","ConfirmationContent","confirm","console","log","code","typeError","Confirmation","PocemonFullInfoContext","React","createContext","FullInfoCard","pokemon","useContext","supertype","attacks","damage","cost","weaknesses","hp","flavorText","api","this","baseUrl","res","ok","json","Promise","reject","status","fetch","headers","Accept","then","checkResponse","App","fakeUser","setLoggedIn","setIsConfirmed","authData","setAuthData","setCards","setTypes","setSubtypes","selectedOptions","setSelectedOptions","copyCards","setCopyCards","isInfoToolTipOpen","setIsInfoToolTipOpen","isImagePopupOpen","setIsImagePopupOpen","cardInfo","pokemonFullInfo","setPokemonFullInfo","setIsGotItems","history","useHistory","closeAllPopups","localStorage","getItem","push","Provider","removeItem","path","data","JSON","stringify","setItem","exact","options","catch","err","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37facb9b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header({ loggedIn, isConfirmed, signOut }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <Link to=\"/pokemon\" className=\"header__logo\">\r\n        LOGO\r\n      </Link>\r\n      <div className=\"header__status\">\r\n        <>\r\n          {loggedIn ? (\r\n            <Link to=\"/sign-in\" className=\"header__link\" onClick={signOut}>\r\n              Назад\r\n            </Link>\r\n          ) : isConfirmed ? (\r\n            <p className=\"header__link\" onClick={signOut}>\r\n              Выйти\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { React } from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nfunction Login({ checkMatch }) {\r\n  return (\r\n    <div className=\"login\">\r\n      <h1 className=\"login__title\">Авторизация</h1>\r\n      <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string()\r\n            .email(\"Некорректно введен e-mail\")\r\n            .required(\"Введите e-mail\"),\r\n          password: Yup.string()\r\n            .required(\"Введите пароль\"),\r\n        })}\r\n        onSubmit={(values, actions) => {\r\n          actions.setSubmitting(true);\r\n          setTimeout(() => {\r\n            actions.setSubmitting(false);\r\n            checkMatch(values);\r\n          }, 1500);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className=\"form\">\r\n            <Field\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"E-mail\"\r\n              className=\"input\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"email\"\r\n              render={(msg) => <div className=\"error\">{msg}</div>}\r\n            />\r\n            <Field\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Пароль\"\r\n              className=\"input\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"password\"\r\n              render={(msg) => <div className=\"error\">{msg}</div>}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className={`${\r\n                isSubmitting ? \"entryBtn entryBtn_disabled\" : \"entryBtn\"\r\n              }`}\r\n            >\r\n              {isSubmitting ? \"Выполняется вход...\" : \"Войти\"}\r\n              {isSubmitting ? <div className=\"loader\" /> : \"\"}\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nfunction ProtectedRoute({ component: Component, ...props }) {\r\n  return (\r\n    <Route>\r\n      {() =>\r\n        props.isConfirmed ? <Component {...props} /> : <Redirect to=\"/sign-in\" />\r\n      }\r\n    </Route>\r\n  );\r\n}\r\n\r\nexport default ProtectedRoute;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Card({ card, getPokemonInfo, setCardInfo, openFullImage }) {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div\r\n          style={{ backgroundImage: `url(${card.images.small})` }}\r\n          className=\"card__image\"\r\n          onClick={() => {\r\n            setCardInfo(card);\r\n            openFullImage();\r\n          }}\r\n        >\r\n          <span\r\n            className=\"card__quick-view\"\r\n          ></span>\r\n        </div>\r\n        <div className=\"card__description\">\r\n          <div className=\"card__name\">{card.name}</div>\r\n          <div className=\"card__subtitle\">\r\n            <b>Автор:</b> {card.artist}\r\n          </div>\r\n          <Link\r\n            to={`/pokemon/${card.name}`}\r\n            className=\"card__link\"\r\n            onClick={() => {getPokemonInfo(card)}}\r\n          >\r\n            Подробнее\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { React } from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nfunction Cards({ cards, getPokemonInfo, isGotItems, setCardInfo, openFullImage }) {\r\n  return (\r\n    <div className=\"cards\">\r\n      {isGotItems ? (\r\n        <div className=\"wrap-for-loader\">\r\n          <div className=\"cardsLoader\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        cards.map((item) => (\r\n          <Card key={item.id} card={item} getPokemonInfo={getPokemonInfo} setCardInfo={setCardInfo} openFullImage={openFullImage} />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nfunction ListItem({ item, selectItem }) {\r\n  function select() {\r\n    selectItem(item);\r\n  }\r\n\r\n  return (\r\n  <li className=\"selector__list-item\" onClick={select}>\r\n    {item}\r\n  </li>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import { React, useState, useEffect } from \"react\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nfunction Selector({\r\n  selesctItem,\r\n  listItems,\r\n  typeSelector,\r\n  isGotItems,\r\n  menuId,\r\n  menuList,\r\n  toggleMenu,\r\n}) {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [selectValue, setSelectValue] = useState(\"\");\r\n  const [listValueItems, setListValueItems] = useState([]);\r\n  const [titleSelect, setTitleSelect] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setListValueItems(listItems);\r\n  }, [listItems]);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => {\r\n    if (typeSelector === \"type\") {\r\n      setTitleSelect(\"Выберите тип\");\r\n    } else {\r\n      setTitleSelect(\"Выберите подтип\");\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (listItems) {\r\n      setListValueItems(() =>\r\n        listItems.filter((item) =>\r\n          item.toLowerCase().includes(selectValue.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectValue]);\r\n\r\n  function changeOption(e) {\r\n    setSelectValue(e.target.value);\r\n  }\r\n\r\n  function handleMenu() {\r\n    // setIsMenuOpen(!isMenuOpen);\r\n    toggleMenu(menuId)\r\n    setSelectValue(\"\");\r\n  }\r\n\r\n  function choiceTypeAndSelect(item) {\r\n    setSelectValue(item);\r\n    setItemTitle(item);\r\n    selesctItem(item, typeSelector);\r\n    handleMenu();\r\n  }\r\n\r\n  function setItemTitle(name) {\r\n    setTitleSelect(name);\r\n    setIsMenuOpen(false);\r\n    setSelectValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"selector\">\r\n      {isGotItems ? (\r\n        <div className=\"selector__switch selector__switch_disabled\">\r\n          Идёт загрузка...\r\n          <div className=\"loader\" />\r\n        </div>\r\n      ) : (\r\n        <div\r\n          className={`selector__switch ${\r\n            menuList[menuId] ? \"selector__switch_opened\" : \"\"\r\n          }`}\r\n          onClick={() => handleMenu()}\r\n        >\r\n          {titleSelect}\r\n          <span\r\n            className={`selector__arrow ${\r\n              menuList[menuId] ? \"selector__arrow_opened\" : \"\"\r\n            }`}\r\n          ></span>\r\n        </div>\r\n      )}\r\n      <div\r\n        className={`selector__menu ${\r\n          menuList[menuId] ? \"selector__menu_opened\" : \"\"\r\n        }`}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          name=\"finder\"\r\n          className=\"selector__finder\"\r\n          placeholder=\"Искать... \"\r\n          value={selectValue || \"\"}\r\n          onChange={changeOption}\r\n          autoComplete=\"off\"\r\n        />\r\n        <ul className=\"selector__list\">\r\n          {listValueItems.map((item, i) => (\r\n            <ListItem key={i} item={item} selectItem={choiceTypeAndSelect} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Selector;\r\n","import { React, useState, useEffect } from \"react\";\r\nimport Selector from \"./Selector\";\r\n\r\nfunction Sidebar(props) {\r\n  const { types, subtypes, getSelectedOptions, isGotItems } = props;\r\n\r\n  const [selectedItems, setSelectedItems] = useState({});\r\n  const [menuList, setMenuList] = useState({ one: false, two: false });\r\n\r\n  useEffect(() => {\r\n    getSelectedOptions(selectedItems);\r\n  }, [selectedItems, getSelectedOptions]);\r\n\r\n  function getSelectedItems(item, typeSelector) {\r\n    typeSelector === \"type\"\r\n      ? setSelectedItems({ ...selectedItems, type: item })\r\n      : setSelectedItems({ ...selectedItems, subtype: item });\r\n  }\r\n\r\n  function toggleMenu(menuId) {\r\n    setMenuList(() => {\r\n      return Object.assign(\r\n        { one: false, two: false },\r\n        { [menuId]: !menuList[menuId] }\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <Selector\r\n        menuId=\"one\"\r\n        menuList={menuList}\r\n        toggleMenu={toggleMenu}\r\n        selesctItem={getSelectedItems}\r\n        isGotItems={isGotItems}\r\n        listItems={types}\r\n        typeSelector=\"type\"\r\n      />\r\n      <Selector\r\n        menuId=\"two\"\r\n        menuList={menuList}\r\n        toggleMenu={toggleMenu}\r\n        selesctItem={getSelectedItems}\r\n        isGotItems={isGotItems}\r\n        listItems={subtypes}\r\n        typeSelector=\"subtype\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nfunction Pagination({ currentPage, routePage, pagesAmount, isGotItems }) {\r\n  const { nextPage, prevPage, firstPage, lastPage } = routePage;\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      {!isGotItems ? (\r\n        <>\r\n          <button\r\n            className={`pagination__button ${\r\n              currentPage === 1 ? \"pagination__button_disabled\" : \"\"\r\n            }`}\r\n            disabled={currentPage === 1 ? true : false}\r\n            onClick={firstPage}\r\n          >\r\n            на первую\r\n          </button>\r\n          <button\r\n            className={`pagination__button ${\r\n              currentPage === 1 ? \"pagination__button_disabled\" : \"\"\r\n            }`}\r\n            disabled={currentPage === 1 ? true : false}\r\n            onClick={prevPage}\r\n          >\r\n            предыдущая\r\n          </button>\r\n          <button className=\"pagination__button\">\r\n            {currentPage} / {pagesAmount}\r\n          </button>\r\n          <button\r\n            className={`pagination__button ${\r\n              currentPage === pagesAmount ? \"pagination__button_disabled\" : \"\"\r\n            }`}\r\n            disabled={currentPage === pagesAmount ? true : false}\r\n            onClick={nextPage}\r\n          >\r\n            следующая\r\n          </button>\r\n          <button\r\n            className={`pagination__button ${\r\n              currentPage === pagesAmount ? \"pagination__button_disabled\" : \"\"\r\n            }`}\r\n            disabled={currentPage === pagesAmount ? true : false}\r\n            onClick={lastPage}\r\n          >\r\n            на последнюю\r\n          </button>\r\n        </>\r\n      ) : (\r\n        // <div className=\"pagination__message\">\r\n        //   Подождите, идет загрузка карточек . . .\r\n        //   <div className=\"loader\" />\r\n        // </div>\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import { React, useState, useEffect } from \"react\";\r\n\r\nimport Cards from \"./Cards\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nfunction Main(props) {\r\n  const {\r\n    cards,\r\n    types,\r\n    subtypes,\r\n    getSelectedOptions,\r\n    getPokemonInfo,\r\n    isGotItems,\r\n    onClose,\r\n    setCardInfo,\r\n    openFullImage,\r\n    getCards,\r\n    getTypes,\r\n    getSubtypes,\r\n  } = props;\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [cardsPerPage, setCardsPerPage] = useState(4);\r\n  const [pagesAmount, setPagesAmount] = useState(1);\r\n  const [defaultCards, setDefaultCards] = useState(cards);\r\n\r\n  useEffect(() => {\r\n    getCards();\r\n    getTypes();\r\n    getSubtypes();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  \r\n  // ФУНКЦИОНАЛЬНОСТЬ ДЛЯ ПАГИНАЦИИ:\r\n  // Начальный рендер первой страницы с карточкамми\r\n  useEffect(() => {\r\n    setDefaultCards(cards); // В этом месте пока что еще целый массив\r\n    changePage(1); // Здесь массив уже урезан до объема, отображаемого на странице\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cards]);\r\n\r\n  // Установка количества страниц\r\n  useEffect(() => {\r\n    setPagesAmount(Math.ceil(cards.length / cardsPerPage));\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cards]);\r\n\r\n  // Зависимость выбора части массива от страницы\r\n  useEffect(() => {\r\n    changePage(currentPage);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPage]);\r\n\r\n  // Оставляем только ту часть массива, которая нужна для отображения на странице\r\n  function changePage(numberPage) {\r\n    setDefaultCards(\r\n      cards.slice(\r\n        numberPage * cardsPerPage - cardsPerPage,\r\n        numberPage * cardsPerPage\r\n      )\r\n    );\r\n  }\r\n\r\n  // Переход на первую страницу при выборе фильтров\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [cards]);\r\n\r\n  // Переключиться на след.страницу\r\n  function nextPage() {\r\n    setCurrentPage((prev) => {\r\n      if (prev === pagesAmount) {\r\n        return prev;\r\n      } else {\r\n        return prev + 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Переключиться на предыдущ.страницу\r\n  function prevPage() {\r\n    setCurrentPage((prev) => {\r\n      if (prev === 1) {\r\n        return prev;\r\n      } else {\r\n        return prev - 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Переключиться на первую страницу\r\n  function firstPage() {\r\n    setCurrentPage(1);\r\n  }\r\n\r\n  // Переключиться на последнюю страницу\r\n  function lastPage() {\r\n    setCurrentPage(pagesAmount);\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Sidebar\r\n        types={types}\r\n        subtypes={subtypes}\r\n        getSelectedOptions={getSelectedOptions}\r\n        isGotItems={isGotItems}\r\n      />\r\n      <div className=\"main-side\">\r\n        <Cards\r\n          cards={defaultCards}\r\n          getPokemonInfo={getPokemonInfo}\r\n          isGotItems={isGotItems}\r\n          onClose={onClose}\r\n          setCardInfo={setCardInfo}\r\n          openFullImage={openFullImage}\r\n        />\r\n        <Pagination\r\n          currentPage={currentPage}\r\n          pagesAmount={pagesAmount}\r\n          isGotItems={isGotItems}\r\n          routePage={{ nextPage, prevPage, firstPage, lastPage }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction ErrorPopup({ onClose, isOpen }) {\r\n  return (\r\n    <div\r\n      className={`popup ${isOpen ? \"popup_opened\" : \"\"}`}\r\n      onClick={(e) => {\r\n        if (e.target.className === \"popup popup_opened\") {\r\n          onClose();\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"popup__container\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"popup__close-icon\"\r\n          onClick={onClose}\r\n        ></button>\r\n        <div className=\"popup__err-image\" />\r\n        <h3 className=\"popup__title\">\r\n          Данные введены неправильно\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorPopup;\r\n","import { React } from \"react\";\r\n\r\nfunction FullImagePopup({ card, onClose, isOpen }) {\r\n  return (\r\n    <>\r\n      {card.images ? (\r\n        <div\r\n          className={`popup ${isOpen ? \"popup_opened\" : \"\"}`}\r\n          onClick={(e) => {\r\n            if (e.target.className === \"popup popup_opened\") {\r\n              onClose();\r\n            }\r\n          }}\r\n        >\r\n          <div className=\"popup__container\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"popup__close-icon\"\r\n              onClick={onClose}\r\n            ></button>\r\n            <img\r\n              alt={card.name}\r\n              className=\"popup__image\"\r\n              src={card.images.large}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FullImagePopup;\r\n","import React from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nfunction ConfirmationContent({ confirm }) {\r\n  console.log(\"Код проверки: 123456\")\r\n  return (\r\n    <div className=\"confirm\">\r\n      <p className=\"confirm__title\">\r\n        На Ваш номер телефона был выслан код проверки. Введите его в поле ниже.\r\n      </p>\r\n      <Formik\r\n        initialValues={{ code: \"\" }}\r\n        validationSchema={Yup.object().shape({\r\n          code: Yup.number()\r\n            .typeError(\"Код должен состоять только из цифр\")\r\n            .required(\"Введите код из SMS-сообщения\"),\r\n        })}\r\n        onSubmit={(values, actions) => {\r\n          actions.setSubmitting(true);\r\n          setTimeout(() => {\r\n            actions.setSubmitting(false);\r\n            confirm(values);\r\n          }, 1500);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className=\"form\">\r\n            <Field\r\n              type=\"text\"\r\n              name=\"code\"\r\n              placeholder=\"Код из SMS-сообщения\"\r\n              className=\"input\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"code\"\r\n              render={(msg) => <div className=\"error\">{msg}</div>}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className={`${\r\n                isSubmitting ? \"entryBtn entryBtn_disabled\" : \"entryBtn\"\r\n              }`}\r\n            >\r\n              {isSubmitting ? \"Подтверждение\" : \"Подтвердить\"}\r\n              {isSubmitting ? <div className=\"loader\" /> : \"\"}\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmationContent;\r\n","import { Redirect } from \"react-router-dom\";\r\nimport ConfirmationContent from \"./ConfirmationContent\";\r\n\r\nfunction Confirmation(props) {\r\n  return props.loggedIn ? (\r\n    <ConfirmationContent {...props} />\r\n  ) : (\r\n    <Redirect to=\"/sign-in\" />\r\n  );\r\n}\r\n\r\nexport default Confirmation;\r\n","import React from 'react';\r\n\r\nexport const PocemonFullInfoContext = React.createContext();","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { PocemonFullInfoContext } from \"../contexts/pocemonFullInfoContext.js\";\r\n\r\nfunction FullInfoCard() {\r\n  const pokemon = React.useContext(PocemonFullInfoContext);\r\n  \r\n  return (\r\n    <div className=\"full\">\r\n      <section className=\"full__left-side\">\r\n        <div className=\"full__image\" style={{ backgroundImage: `url(${pokemon.images.large})` }} />\r\n      </section>\r\n      <section className=\"full__right-side\">\r\n        <h1 className=\"full__title\">{pokemon.name}</h1>\r\n        <p className=\"full__subtitle\">Супертип: {pokemon.supertype}</p>\r\n        <p className=\"full__subtitle\">Тип: {pokemon.types}</p>\r\n        <p className=\"full__subtitle\">Подтип: {pokemon.subtypes}</p>\r\n        <span className=\"full__line\"></span>\r\n        <p className=\"full__subtitle\">Урон от атаки: {pokemon.attacks[0].damage ? pokemon.attacks[0].damage : \"урон не указан или отсутствует\"}</p>\r\n        <p className=\"full__subtitle\">Затраты на атаку: {pokemon.attacks[0].cost[0] ? pokemon.attacks[0].cost[0] : \"затраты не указаны или отсутствуют\"}</p>\r\n        <p className=\"full__subtitle\">Слабости: {pokemon.weaknesses ? pokemon.weaknesses[0].type : \"нет слабостей\"}</p>\r\n        <p className=\"full__subtitle\">Кол-во здоровья: {pokemon.hp}hp</p>\r\n        <p className=\"full__description\"><b>Описание:</b> {pokemon.flavorText}</p>\r\n        <Link to=\"/pokemon\" className=\"full__link\">Назад</Link>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FullInfoCard;\r\n","class Api {\r\n  constructor() {\r\n    this.baseUrl = 'https://api.pokemontcg.io/v2';\r\n  }\r\n\r\n  checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Произошла ошибка: ${res.status}`);\r\n  }\r\n\r\n  getCards() {\r\n    return fetch(`${this.baseUrl}/cards`, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    }).then(this.checkResponse);\r\n  }\r\n\r\n  getTypes() {\r\n    return fetch(`${this.baseUrl}/types`, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    }).then(this.checkResponse);\r\n  }\r\n\r\n  getSubtypes() {\r\n    return fetch(`${this.baseUrl}/subtypes`, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    }).then(this.checkResponse);\r\n  }\r\n}\r\n\r\nconst api = new Api();\r\nexport default api;","import { React, useState, useEffect } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\n\n// Импорт компоонентов\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport Main from \"./Main\";\nimport ErrorPopup from \"./ErrorPopup\";\nimport FullImagePopup from \"./FullImagePopup\";\nimport Confirmation from \"./Confirmation\";\nimport FullInfoCard from \"./FullInfoCard\";\n\n// Импорт utils\nimport api from \"../utils/api.js\";\n\n// Импорт контекста\nimport { PocemonFullInfoContext } from \"../contexts/pocemonFullInfoContext.js\";\n\nfunction App() {\n  const fakeUser = {\n    email: \"kode@kode.ru\",\n    password: \"Enk0deng\",\n  };\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [authData, setAuthData] = useState({});\n  const [cards, setCards] = useState([]);\n  const [types, setTypes] = useState([]);\n  const [subtypes, setSubtypes] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [copyCards, setCopyCards] = useState([]);\n\n  // Для попапов\n  const [isInfoToolTipOpen, setIsInfoToolTipOpen] = useState(false);\n  const [isImagePopupOpen, setIsImagePopupOpen] = useState(false);\n  const [cardInfo, setCardInfo] = useState({});\n\n  // Стэйт для контекста\n  const [pokemonFullInfo, setPokemonFullInfo] = useState({});\n\n  // Стэйты лоадеров\n  const [isGotItems, setIsGotItems] = useState(false);\n\n  const history = useHistory();\n\n  // Проверка токена\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwt\");\n    if (token) {\n      setIsConfirmed(true);\n      history.push(\"/pokemon\");\n    } else {\n      setIsConfirmed(false);\n      history.push(\"/sign-in\");\n    }\n  }, [history]);\n\n  // Рендер карточек с сервера\n  function getCards() {\n    setIsGotItems(true);\n    api\n      .getCards()\n      .then((res) => {\n        setCards(res.data);\n        setCopyCards(res.data);\n      })\n      .catch((err) => console.log(err))\n      .finally(() => {\n        setIsGotItems(false);\n      });\n  }\n\n  // Рендер типов\n  function getTypes() {\n    api\n      .getTypes()\n      .then((res) => {\n        setTypes(res.data);\n      })\n      .catch((err) => console.log(err));\n  }\n\n  // Рендер подтипов\n  function getSubtypes() {\n    api\n      .getSubtypes()\n      .then((res) => {\n        setSubtypes(res.data);\n      })\n      .catch((err) => console.log(err));\n  }\n\n  // Авторизация и запись токена в LocalStorage(имитация)\n  function checkMatch(data) {\n    if (JSON.stringify(data) === JSON.stringify(fakeUser)) {\n      setAuthData(data);\n      setLoggedIn(true);\n      history.push(\"/confirmation\");\n    } else {\n      setIsInfoToolTipOpen(true);\n    }\n  }\n\n  // Подтверждение по коду из SMS(имитация)\n  function checkCode({ code }) {\n    const fakeCode = 123456;\n    // eslint-disable-next-line eqeqeq\n    if (code == fakeCode) {\n      setLoggedIn(false);\n      setIsConfirmed(true);\n      localStorage.setItem(\n        \"jwt\",\n        `${authData.email}${authData.password}some_secret_key`\n      );\n      history.push(\"/pokemon\");\n    } else {\n      setIsInfoToolTipOpen(true);\n    }\n  }\n\n  // Выход из системы\n  function signOut() {\n    localStorage.removeItem(\"jwt\");\n    history.push(\"/sign-in\");\n    setIsConfirmed(false);\n    setLoggedIn(false);\n  }\n\n  // Закрытие любого из попапов\n  function closeAllPopups() {\n    setIsInfoToolTipOpen(false);\n    setIsImagePopupOpen(false);\n    setCardInfo({});\n  }\n\n  // Изменение значений контекста\n  function getPokemonInfo(card) {\n    setPokemonFullInfo(card);\n  }\n\n  // ФУНКЦИОНАЛЬНОСТЬ ДЛЯ ФИЛЬТРАЦИИ КАРТОЧЕК:\n  // Задание опций для фильтрации карточек\n  function getSelectedOptions(options) {\n    setSelectedOptions(options);\n  }\n\n  // Проверка по условиям фильтра\n  useEffect(() => {\n    setCards(() => {\n      return copyCards.filter((item) => {\n        if (!selectedOptions.type && !selectedOptions.subtype) {\n          return true;\n        } else if (\n          item.types.includes(selectedOptions.type) &&\n          !selectedOptions.subtype\n        ) {\n          return true;\n        } else if (\n          !selectedOptions.type &&\n          item.subtypes.includes(selectedOptions.subtype)\n        ) {\n          return true;\n        } else if (\n          item.types.includes(selectedOptions.type) &&\n          item.subtypes.includes(selectedOptions.subtype)\n        ) {\n          return true;\n        }\n        return false;\n      });\n    });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedOptions]);\n\n  // Попап быстрого просмотра карточки\n  function openFullImagePopup() {\n    setIsImagePopupOpen(true)\n  }\n\n  function setInfoFullImagePopup(card) {\n    setCardInfo(card)\n  }\n\n  return (\n    <>\n      <div className=\"page\">\n        <PocemonFullInfoContext.Provider value={pokemonFullInfo}>\n          <Header\n            signOut={signOut}\n            loggedIn={loggedIn}\n            isConfirmed={isConfirmed}\n          />\n          <Switch>\n            <Route path=\"/sign-in\">\n              <Login checkMatch={checkMatch} />\n            </Route>\n\n            <Route path=\"/confirmation\">\n              <Confirmation loggedIn={loggedIn} confirm={checkCode} />\n            </Route>\n\n            <ProtectedRoute\n              path=\"/pokemon\"\n              exact\n              isConfirmed={isConfirmed}\n              component={Main}\n              cards={cards}\n              types={types}\n              subtypes={subtypes}\n              getSelectedOptions={getSelectedOptions}\n              getPokemonInfo={getPokemonInfo}\n              isGotItems={isGotItems}\n              setCardInfo={setInfoFullImagePopup}\n              openFullImage={openFullImagePopup}\n              getCards={getCards}\n              getTypes={getTypes}\n              getSubtypes={getSubtypes}\n            />\n\n            <ProtectedRoute\n              path=\"/pokemon/:name\"\n              isConfirmed={isConfirmed}\n              component={FullInfoCard}\n            />\n          </Switch>\n        </PocemonFullInfoContext.Provider>\n      </div>\n\n      <ErrorPopup isOpen={isInfoToolTipOpen} onClose={closeAllPopups} />\n      <FullImagePopup card={cardInfo} isOpen={isImagePopupOpen} onClose={closeAllPopups} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./pages/index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}